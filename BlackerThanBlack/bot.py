from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from config import TOKEN
from keyboards import get_days_kb, get_route_kb
from weather import get_weather

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())


class RouteState(StatesGroup):
    start_point = State()
    end_point = State()
    add_point = State()


@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ –º–∞—Ä—à—Ä—É—Ç—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /weather —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É"
    )


@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
        "/weather - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"
    )


@dp.message(Command("weather"))
async def weather_cmd(message: types.Message, state: FSMContext):
    await state.set_state(RouteState.start_point)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:")


@dp.message(RouteState.start_point)
async def process_start(message: types.Message, state: FSMContext):
    await state.update_data(route=[message.text])
    await state.set_state(RouteState.end_point)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:")


@dp.message(RouteState.end_point)
async def process_end(message: types.Message, state: FSMContext):
    data = await state.get_data()
    route = data["route"]
    route.append(message.text)

    points = "\n‚Üí ".join(route)
    await state.update_data(route=route)

    await message.answer(
        f"–í–∞—à –º–∞—Ä—à—Ä—É—Ç:\n‚Üí {points}\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=get_route_kb()
    )


@dp.callback_query(lambda c: c.data == "route_add")
async def add_point(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(RouteState.add_point)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É:")
    await callback.answer()


@dp.message(RouteState.add_point)
async def process_add(message: types.Message, state: FSMContext):
    data = await state.get_data()
    route = data["route"]
    route.append(message.text)
    points = "\n‚Üí ".join(route)

    await state.update_data(route=route)
    await message.answer(
        f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:\n‚Üí {points}\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=get_route_kb()
    )


@dp.callback_query(lambda c: c.data == "route_ok")
async def confirm_route(callback: types.CallbackQuery):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:",
        reply_markup=get_days_kb()
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("days_"))
async def process_days(callback: types.CallbackQuery, state: FSMContext):
    days = int(callback.data.split("_")[1])
    data = await state.get_data()

    await callback.message.answer("–ü–æ–ª—É—á–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã...")

    for city in data["route"]:
        weather = await get_weather(city, days)
        if not weather:
            await callback.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ {city}")
            continue

        text = f"–ü–æ–≥–æ–¥–∞ –≤ {weather['city']}:\n\n"
        for forecast in weather['forecasts']:
            text += (
                f"üìÖ {forecast['date']}:\n"
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast['temp']}¬∞C\n"
                f"üíß –û—Å–∞–¥–∫–∏: {forecast['rain']}–º–º\n"
                f"üí® –í–µ—Ç–µ—Ä: {forecast['wind']} –º/—Å\n\n"
            )
        await callback.message.answer(text)

    await state.clear()
    await callback.answer()